
#include "answer02.h"
#include<string.h>


char * strcat_ex(char * * dest, int * n, const char * src)
{ 
	//LOCAL DECLARATIONS
	

	//EXECUTABLE STATEMENTS
	if(*n  < 1 + 2 *(strlen(*dest) + strlen(src)))
	{
		char * buffer = malloc(1 + 2 * (strlen(*dest) + strlen(src)));
		*n = (int*)buffer;
		strcpy(buffer,*dest);
		*dest = buffer;
			
		if(*dest != NULL)
		{			
		free(*dest);
		}


		strcat(*dest,src);
		return(*dest);
	}
	
	else
	{
	
	strcat(*dest, src);
 	return (*dest);
	
	}
}	

char * * explode(const char *str, const char *delims, int *arrlen)
	
{
	//LOCAL DECLARATIONS
	int i = 0;
	int j = 0;
	int numD = 0;
	int counter = 0;
	int previous = 0;
	char * * strArr = malloc((*arrlen)*sizeof(char*));
	
	//EXECUTABLE STATEMENTS
	while(str[i] != '\0')
	{
		i++;
		if(strchr(delims, str[i]) != NULL)	
		{
			numD++;
		}
	}

	*arrlen = numD + 1;
	//check here
	i = 0;

	while(i <= strlen(str))
	{
		if((strchr(delims,str[i]) != NULL)||(str[i] == '\0\))
		{
			strArr[j] = (char*)malloc((count + 1) * sizeof(char));
			memcpy(strArr[j], &str[previous], i - (previous - 1));
			strArr[j][i - previous] = '\0';
			


			previous = i+1;
			count = 0;
			j++;
		}
	
	else	
	{
		count++;
	}
	i++;
	}
	return(strArr)

}

void desroyStringArray(char * * strArr, int len);
{
	//LOCAL DECLARATIONS
	int i; 
	

	//EXECUTABLE STATEMENTS
	for(i = 0; i < len; i++)
	{
		free(strArr[i]);
	}
	strArr[] = NULL;
}
